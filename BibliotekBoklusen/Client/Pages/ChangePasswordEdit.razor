@page "/ChangePasswordEdit"
@inject IUserManager UserManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>

    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
          <MudText Typo="Typo.h6">Ändra lösenord</MudText>
            <MudForm @ref="form" @bind-Errors="@errors">
                <MudTextField T="string" Label="Nuvarande lösenord" HelperText="Ditt nuvarande lösenord"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Obligatorisk fält" @bind-Value="password.OldPassword" />
                <MudTextField T="string" Label="Nytt lösenord" HelperText="Använd ett starkt lösenord" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Obligatorisk fält" @bind-Value="password.NewPassword" />
                <MudTextField T="string"
                              Label="Upprepa lösenord" HelperText="Upprepa det nya lösenordet" InputType="InputType.Password" Required="true"
                              Validation="@(new Func<string, string>(PasswordMatch))" @bind-Value="password.NewPasswordConfirmed" />
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="() => EditPassword()">Spara</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@if(message == "Ditt lösenord har ändrats")
{
    <MudAlert Severity="Severity.Success">@message</MudAlert>
}
else if(message == "Något gick fel. Har du fyllt i rätt lösenord?")
{
    <MudAlert Severity="Severity.Error">@message</MudAlert>
}

@code {
    PasswordDto password = new PasswordDto();
    string[] errors = { };
    string message = "";
    MudTextField<string> pwField1;
    MudForm form;

    public async Task EditPassword()
    {
        var userEmail = await LocalStorage.GetItemAsync<string>("email");
        password.Email = userEmail;
        message = await UserManager.ChangePassword(password);
        if(message == "Försök igen")
        {
            message = "Något gick fel. Har du fyllt i rätt lösenord?";
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Lösenord är ett krav!";
            yield break;
        }
        if (pw.Length < 6)
            yield return "Lösenordet måste vara minst 6 tecken";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Lösenordet måste innehålla minst en stor bokstav";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Lösenordet måste innehålla minst en liten bokstav";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Lösenordet måste innehålla minst en siffra";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Lösenordet matchar inte";
        return null;
    }
}
