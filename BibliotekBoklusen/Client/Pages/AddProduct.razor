@page "/addproduct"
@inject NavigationManager NavigationManager
@inject IDataManager DataManager


<h3>AddProduct</h3>

<EditForm Model="Creator" OnValidSubmit="RegisterProduct">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Title">Title:</label>
        <InputText Id="Title" class="form-control" @bind-Value="Product.Title" />
        <ValidationMessage For="@(() => Product.Title)" />
    </div>

    <div class="form-group">
        <label for="Creator Firstname">Creator firstname</label>
        <InputText Id="Firstname" class="form-control" @bind-Value="Creator.FirstName" />
        <ValidationMessage For="@(() => Creator.FirstName)" />
    </div>

    <div class="form-group">
        <label for="Creator ">Creator lastname:</label>
        <InputText Id="Lastname" class="form-control" @bind-Value="Creator.LastName" />
        <ValidationMessage For="@(() => Creator.FirstName)" />
    </div>
    <br />
    <div>

        @foreach(var Item in Categories)
        {
            <input type="checkbox" id="Deckare" name="category1" @onclick="(() => HandleChecked(Item))" >
            <label for="category1"> @Item.CategoryName</label>
            
            <br>    
        }
      
     
    </div>
    
    <br />
    <div class="form-group">
        <label for="PublishYear ">Publish year:</label>
        <InputNumber Id="publishYear" class="form-control" @bind-Value="Product.PublishYear" />
        <ValidationMessage For="@(() => Product.PublishYear)" />
    </div>
    <br />
    <div class="form-group">
        <label for="type">Type</label><br />
        <InputRadioGroup id="type" @bind-Value="type" class="form-control"  >
            @foreach(var type in DataManager.Types)
            {
                <InputRadio Value="type"/>@type
            }

        </InputRadioGroup>




    </div>

    <br />

    <button type="submit" class="btn btn-primary" @*@onclick="(()=>SendProduct())"*@>Add Product</button>

</EditForm>


@code {
    public CreatorModel Creator { get; set; } = new();
    public ProductModel Product { get; set; } = new();
    public CategoryModel Category { get; set; } = new();
    public List<CategoryModel> Categories { get; set; } = new();
    public List<CategoryModel> CategoriesToAdd { get; set; } = new();
    public bool isChecked;
    public string type;

    protected override async Task OnInitializedAsync()
    {

        Categories= await DataManager.GetAllCategories();
    }

    private void HandleChecked(CategoryModel category)
    {

        if (category.isChecked==false)
        {
            category.isChecked = true;
            CategoriesToAdd.Add(category);
        }
        else if(category.isChecked==true)
        {
            category.isChecked = false;
            CategoriesToAdd.Remove(category);
        }
    }

    //private ProductCreatorModel SendProduct()
    //{
    //    ProductCreatorModel productCreatorModel = new();
    //    productCreatorModel.Creator = Creator;
    //    productCreatorModel.Product.Type = type;
    //    productCreatorModel 






    //}




    public static void RegisterProduct()
    {

        //ProductCreatorModel productCreator = new();
        //productCreator.Product=
        //productCreator.Creator


    }







}