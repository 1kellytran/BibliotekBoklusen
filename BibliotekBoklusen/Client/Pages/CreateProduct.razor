@page "/createproduct"
@inject IProductManager ProductManager
@inject ICategoryManager CategoryManager

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm Model=Product>
                <MudCardHeader>
                    <h5>Produktdetaljer</h5>
                </MudCardHeader>

                <MudCardContent Class="pa-0">
                    <MudTable Items="@Product.Creators" Elevation="0" Breakpoint="Breakpoint.Sm">
                        <RowTemplate>
                            <MudTd Datalabel="FirstName">
                                <MudForm Model="@context">
                                    <MudTextField @bind-Value="context.FirstName"
                                                  For="@(() => context.FirstName)"
                                                  Label="Skaparens förnamn" />
                                </MudForm>
                            </MudTd>
                            <MudTd Datalabel="LastName">
                                <MudForm Model="@context">
                                    <MudTextField @bind-Value="context.LastName"
                                                  For="@(() => context.LastName)"
                                                  Label="Skaparens efternamn" />
                                </MudForm>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
                <MudCardContent>

                    <MudTextField @bind-Value="Product.Title"
                                  For="@(() => Product.Title)"
                                  Label="Titel" />


                    <MudTextField @bind-Value="Product.Published"
                                  For="@(() => Product.Published)"
                                  Label="Publicerad" />

                    <MudTextField @bind-Value="Product.NumberOfCopiesOwned"
                                  For="@(() => Product.NumberOfCopiesOwned)"
                                  Label="Antal exemplar" />

                    <MudSelect T="ProductType" Label="Typ" @bind-Value="Product.Type" Placeholder="Välj typ" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem T="ProductType" Value="@ProductType.Bok">@ProductType.Bok.ToString()</MudSelectItem>
                        <MudSelectItem T="ProductType" Value="@ProductType.Ebok">@ProductType.Ebok.ToString()</MudSelectItem>
                        <MudSelectItem T="ProductType" Value="@ProductType.Film">@ProductType.Film.ToString()</MudSelectItem>
                        <MudSelectItem T="ProductType" Value="@ProductType.Ljudbok">@ProductType.Ljudbok.ToString()</MudSelectItem>
                    </MudSelect>

                    @foreach (var category in Categories)
                    {
                        <MudCheckBox @bind-Checked="category.isChecked">@category.CategoryName</MudCheckBox>
                    }

                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="RegisterProduct">Skicka</MudButton>
                </MudCardActions>

            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Tillagda produkter</MudText>
 @foreach(var product in addedProducts)
            {
            <MudText Color="Color.Success">@product.Title</MudText>
                
            }
       
        </MudPaper>
    </MudItem>
</MudGrid>




@code {
    public Product Product { get; set; } = new();
    public DateTime TodaysDate { get; set; } = DateTime.Now;
    public List<Category> Categories { get; set; } = new();
    static List<Product> addedProducts = new();
    bool success;
    string message;

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryManager.GetAllCategoriesAsync();
        SetProductStartValue();
    }

    public async Task RegisterProduct()
    {
        SetProductValues();

        var result = await ProductManager.CreateProduct(Product);
        if (result == null)
        {
            message = "";
        }
        else
        {
            addedProducts.Add(Product);
            message = result;
        }
        ClearForm();
    }

    void SetProductValues()
    {

        Product.Published = TodaysDate;
        Product.Category.AddRange(Categories.Where(x => x.isChecked));

    }

    void ClearForm()
    {
        SetProductStartValue();
        foreach (var category in Categories)
        {
            category.isChecked = false;
        }
    }

    void AddCreator()
    {
        Product.Creators.Add(new Creator { });
    }

    void SetProductStartValue()
    {
        Product = new Product();
        Product.Creators.Add(new Creator { });
        Product.Published = TodaysDate;
    }
}