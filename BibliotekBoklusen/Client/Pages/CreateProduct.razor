@page "/createproduct"
@inject IProductManager DataManager
@inject ICategoryManager CategoryManager

<MudCard>
    <MudForm Model=Product @ref="@form">
        <MudCardHeader>
            <h5>Lägg till produkt</h5>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="Product.Title"
                          For="@(() => Product.Title)"
                          Immediate="true"
                          Label="Titel" />
        </MudCardContent>

        <MudTable Items="@Product.Creators">
            <HeaderContent>
                <MudTh>Skaparens förnamn</MudTh>
                <MudTh>Skaparens efternamn</MudTh>
            </HeaderContent>

            <RowTemplate>

                <MudTd Datalabel="FirstName">
                    <MudForm Model="@context">
                        <MudTextField @bind-Value="context.FirstName"
                                      For="@(() => context.FirstName)"
                                      Label="Förnamn" />
                    </MudForm>
                </MudTd>
                <MudTd Datalabel="LastName">
                    <MudForm Model="@context">
                        <MudTextField @bind-Value="context.LastName"
                                      For="@(() => context.LastName)"
                                      Label="Efternamn" />
                    </MudForm>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudCardContent>

            <MudTextField @bind-Value="Product.Published"
                          For="@(() => Product.Published)"
                          Immediate="true"
                          Label="Publicerad" />

            <MudTextField @bind-Value="Product.NumberOfCopiesOwned"
                          For="@(() => Product.NumberOfCopiesOwned)"
                          Immediate="true"
                          Label="Antal exemplar" />

            <MudSelect T="ProductType" Label="Typ" @bind-Value="Product.Type" Placeholder="Välj typ" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="ProductType" Value="@ProductType.Bok">@ProductType.Bok.ToString()</MudSelectItem>
                <MudSelectItem T="ProductType" Value="@ProductType.Ebok">@ProductType.Ebok.ToString()</MudSelectItem>
                <MudSelectItem T="ProductType" Value="@ProductType.Film">@ProductType.Film.ToString()</MudSelectItem>
                <MudSelectItem T="ProductType" Value="@ProductType.Ljudbok">@ProductType.Ljudbok.ToString()</MudSelectItem>
            </MudSelect>


        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="RegisterProduct">Skicka</MudButton>
    </MudCardActions>
</MudCard>

@*<h3>Skapa produkt</h3>
    <div>
    <EditForm Model="Product" OnValidSubmit=RegisterProduct>
    <DataAnnotationsValidator />

    <div class="form-group col-4">
    <label for="Title">Titel:</label>
    <InputText Id="Title" class="form-control" @bind-Value="Product.Title" />
    <ValidationMessage For="@(() => Product.Title)" />
    </div>

    <div class="row">
    <label for="lastname">Skapare:</label>
    <div class="col-4">
    <InputText Id="firstname" class="form-control" placeholder="Förnamn" @bind-Value="Creator.FirstName" />
    <ValidationMessage For="@(() => Creator.FirstName)" />
    </div>

    <div class="col-4">
    <InputText Id="lastname" class="form-control" placeholder="Efternamn" @bind-Value="Creator.LastName" />
    <ValidationMessage For="@(() => Creator.LastName)" />
    </div>
    <div class="col-4 align-content-end">
    <h3 class="btn btn-secondary" @onclick="AddCreator">+</h3>
    </div>
    </div>
    @if (addCreator)
    {
    <div class="row">
    <div class="col-4">
    <InputText Id="firstname" class="form-control" placeholder="Förnamn" @bind-Value="Creator.FirstName" />
    <ValidationMessage For="@(() => Creator.FirstName)" />
    </div>

    <div class="col-4">
    <InputText Id="lastname" class="form-control" placeholder="Efternamn" @bind-Value="Creator.LastName" />
    <ValidationMessage For="@(() => Creator.LastName)" />
    </div>
    </div>
    }

    <div class="form-group col-2">
    <label for="published ">Utgiven:</label>
    <InputDate Id="published" min="1500-01-01" max="TodaysDate" class="form-control" @bind-Value="TodaysDate" />
    <ValidationMessage For="@(() => Product.Published)" />
    </div>
    <div class="form-group col-2">
    <label for="NumberOfCopies ">Antal Kopior:</label>
    <InputNumber Id="NumberOfCopies" class="form-control" @bind-Value="Product.NumberOfCopiesOwned" />
    <ValidationMessage For="@(() => Product.Published)" />
    </div>
    <div class="form-group">
    <div class="selectdiv">
    <label>Typ:</label>
    <InputSelect id="type" @bind-Value="Product.Type">
    <option value="" selected></option>
    @foreach (var productType in Enum.GetValues(typeof(ProductType)))
    {
    <option value="@productType">@productType</option>
    }
    </InputSelect>
    </div>
    </div>
    <div class="form-group">
    <label>Genre:</label>
    <br />
    @if (Categories != null || Categories.Count <= 0)
    {
    @foreach (var Item in Categories)
    {
    <div class="form-group">
    <input type="checkbox" id="@Item.CategoryName" @bind="Item.isChecked">
    <label for="@Item.CategoryName"> @Item.CategoryName</label>
    </div>
    }
    }
    </div>
    <button type="submit" class="btn btn-primary">Spara</button>
    </EditForm>
    </div>
    <br />
    <h4 class="validation-message">@message</h4>
*@


@code {
    public Creator Creator { get; set; } = new();
    public Product Product { get; set; } = new();
    public DateTime TodaysDate { get; set; } = DateTime.Now;
    public List<Product> Products { get; set; } = new();
    public List<Category> Categories { get; set; } = new();
    static List<Product> addedProducts = new();
    string message;
    bool addCreator;
    MudForm form;
    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryManager.GetAllCategoriesAsync();
        Product.Creators.Add(new Creator { });
    }

    public async Task RegisterProduct()
    {
        SetProductValues();
        addedProducts.Add(Product);
        var result = await DataManager.CreateProduct(Product);
        _ = result == null ? (message = "") : (message = result);
        ClearForm();
    }

    void SetProductValues()
    {
        if (Creator != null)
        {
            Product.Published = TodaysDate;
            Product.Creators.Add(Creator);
            Product.Category.AddRange(Categories.Where(x => x.isChecked));
            Products.Add(Product);
        }
    }

    void ClearForm()
    {
        Product = new Product();
        Creator = new Creator();
        foreach (var category in Categories)
        {
            category.isChecked = false;
        }
    }

    void AddCreator()
    {
        _ = addCreator = true ? (addCreator == false) : (addCreator == true);
    }
}