@page "/login"
@inject NavigationManager NavigationManager
@inject IUserManager UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="card">
    <h1 class="card-header">Logga in</h1>
    <div class="card-body">
        <EditForm Model="user" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="user.Email" class="form-control" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Lösenord</label>
                <InputText id="password" @bind-Value="user.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Logga in</button>
            <NavLink href="register" class="btn btn-link">Registrera</NavLink>
        </EditForm>
    </div>
</div>

<h5 class="validation-message">@message</h5>

@code {
    private LoginDto user = new LoginDto();
    string message;

    async Task HandleLogin()
    {
        message = await UserManager.Login(user);

        if (String.IsNullOrEmpty(message))
        {
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
    }
}
