@inject IUserManager UserManager
@page "/members"
<MudDataGrid T="User" MultiSelection="true" Items="@Members" Sortable="true" Filterable="true" 
    Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
  @*  <ToolBarContent>
        <MudText Typo="Typo.h6">Medlemmar</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="User" />
      @*  <Column T="" Field="Number" Title="Nr" Sortable="false" Filterable="false" />
        <Column T="" Field="FirstName" />
        <Column T="User" Field="Name" @*SortBy="@_sortBy" />
        <Column T="User" Field="Position" />
        <Column T="User" Field="Molar" Title="Molar mass" />
        <Column T="User" Field="Group" Title="Category" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="User" />*@
   @* </PagerContent>*@
</MudDataGrid>
@*
<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>*@
@code {
    private List<User> Members = new List<User>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    //private Func<User, object> _sortBy => x =>
    //{
    //    if (_sortNameByLength)
    //        return x.LastName.Length;
    //    else
    //        return x.LastName;
    //};
    // quick filter - filter gobally across multiple columns with the same input
    //private Func<User, bool> _quickFilter => x =>
    //{
    //    if (string.IsNullOrWhiteSpace(_searchString))
    //        return true;

    //    if (x.Sign.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;

    //    if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;

    //    if ($"{x.Number} {x.Position} {x.Molar}".Contains(_searchString))
    //        return true;

    //    return false;
    //};

    protected override async Task OnInitializedAsync()
    {
        Members = await UserManager.GetAllUser();
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<User> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<User> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
