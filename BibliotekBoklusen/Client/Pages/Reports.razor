@page "/reports"
@inject ILoanManager LoanManager
@inject IUserManager UserManager
<h3>Reports</h3>

<AuthorizeView Roles="Librarian, Admin">
    <div class="form-group">
        <div class="col">
            <div class="form-outline">
                <href @onclick="ShowProductsToBeReturned">Användare med aktiva lån</href>
            </div>
            <div class="form-outline">
                <href @onclick="ShowWhoLoansAlot">Användare med flest lån</href>
            </div>
        </div>
    </div>
</AuthorizeView>

<div class="form-group">
    <div class="col">
        <href @onclick="ShowPopularProducts">Boklusens mest populära</href>
    </div>
</div>

@if (ProductsToBeReturned)
{
    <NeedToReturn></NeedToReturn>
}

@if (WhoLoansAlot)
{
    <h2 class="mt-3">Top 10 låntagare:</h2>

    <table class="table mb-5">
        <thead class="thead-light">
            <tr>
                <th>Id:</th>
                <th>Förnamn:</th>
                <th>Efternamn:</th>
                <th>Email:</th>
                <th>Antal lån:</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in TopUsers)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>

                    @foreach (var item in LoansByUser)
                    {
                        if (item.UserId ==user.Id)
                        {
                            <td>@item.LoansCount</td>
                        }
                        
                    }

                </tr>
            }
        </tbody>
    </table>
}

@if (PopularProducts)
{
    <TopProducts />
}

@code {

    public List<User> TopUsers { get; set; } = new();
    public List<LoansByUserDTO> LoansByUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var loans = await LoanManager.GetAllLoansAsync();

        var count = loans.GroupBy(s => s.UserId)
            .Select(grp => new
            {
                userId = grp.Key,
                loansCount = grp.Count()
            }).OrderByDescending(l => l.loansCount).ToList();

        List<int> topUsersUserId = new();

        for (int index = 0; index < count.Count && index <= 9; index++)
        {
            LoansByUserDTO lbu = new();
            lbu.UserId = (int)count[index].userId;
            lbu.LoansCount = (int)count[index].loansCount;
            LoansByUser.Add(lbu);
        }

        foreach (var user in LoansByUser)
        {
            var topUser = await UserManager.GetUser(user.UserId);
            TopUsers.Add(topUser);
        }

    }

    bool ProductsToBeReturned;
    bool WhoLoansAlot;
    bool PopularProducts;

    void ShowProductsToBeReturned()
    {
        _ = !ProductsToBeReturned ? ProductsToBeReturned = true : ProductsToBeReturned = false;
    }

    void ShowWhoLoansAlot()
    {
        _ = !WhoLoansAlot ? WhoLoansAlot = true : WhoLoansAlot = false;
    }

    void ShowPopularProducts()
    {
        _ = !PopularProducts ? PopularProducts = true : PopularProducts = false;
    }

}
