@page "/allproducts"
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject ISearchManager SearchManager
@inject ILoanManager LoanManager
@inject IProductManager ProductManager
@inject IUserManager UserManager
@inject IProductCopyManager ProductCopyManager
@inject IReservationManager ReservationManager


<NotAuthorized>
    <h3>Produkter</h3>

    @if (editProduct)
        {
            <EditForm Context="_context" Model="ProductToUpdate" OnSubmit="SaveEditProduct">
                <table class="table">
            <thead class="thead-light">
                <tr>
                    <th>Titel</th>
                    <th>Förnamn</th>
                    <th>Efternamn</th>
                    <th>Utgåva</th>
                    <th>Exemplar</th>
                </tr>
            </thead>
                    <tbody>
                        <tr>
                            <td><input type="text" @bind-value="ProductToUpdate.Title" /></td>
                            @foreach(var c in ProductToUpdate.Creators)
                            {
                                <td><input type="text" @bind-value=c.FirstName /></td>
                                <td><input type="text" @bind-value="c.LastName" /></td>
                            }                            
                            <td><input type="text" @bind-value="ProductToUpdate.Published" /></td>
                            <td><input type="number" @bind-value="ProductToUpdate.NumberOfCopiesOwned" /></td>
                            <td><button type="submit" class="btn btn-primary">Spara</button></td>
                        </tr>
                    </tbody>
                </table>
            </EditForm>
        }

    @if (AllProducts != null)
    {
        <table class="table">
            <thead class="thead-light">
                <tr>
                    <th>Titel</th>
                    <th>Typ</th>
                    <th>Utgåva</th>
                    <th>Skapare</th>
                </tr>
            </thead>
            @foreach (var p in AllProducts)
            {
                <tr>
                    <a href="/ProductById/@p.Id" class="table-bordered">@p.Title</a>
                    <td>@p.Type</td>
                    <td>@p.Published.ToString("yyyy")</td>
                    @foreach (var creator in p.Creators)
                    {
                        <td>@creator.FirstName @creator.LastName</td>
                        <br />
                    }
                    <AuthorizeView Roles="Member">
                        @foreach (var product in AvailableLoans)
                        {
                            @if (p.Id == product.Id)
                            {
                                isAvailable = true;
                            }
                        }

                        @if (isAvailable == true)
                        {
                            <td><a class="btn" @onclick="() => LoanProduct(p.Id)">Låna</a></td>
                        }
                        else
                        {
                            <td><a class="btn" @onclick="()=> ReserveProduct(p.Id)">Reservera</a></td>
                        }
                    </AuthorizeView>
                    <AuthorizeView Roles="Admin, Librarian">
                        <td><MudButton @onclick="() => EditProduct(p.Id, p)"><MudIcon Icon="@Icons.Filled.Edit"></MudIcon></MudButton><MudButton @onclick="() => DeleteProduct(p.Id)"><MudIcon Icon="@Icons.Filled.Delete"></MudIcon></MudButton></td>

                    </AuthorizeView>
                </tr>
                
                @if (isAvailable)
                {
                    isAvailable = false;
                }
            }
        </table>
    }
</NotAuthorized>

@code {
    [Parameter]
    public int Id { get; set; }
    public List<Product>? AllProducts { get; set; } = new();
    public List<Category> Categories { get; set; } = new();
    public List<Product> AvailableLoans { get; set; } = new();
    public DateTime TodaysDate { get; set; } = DateTime.Now;
    public Product ProductToUpdate { get; set; } = new();
    public Creator Creator { get; set; } = new();
    public User CurrentUser { get; set; } = new();
    private bool isAvailable;
    private bool addCreator;
    public bool editProduct;
    int ProductId;

    protected override async Task OnInitializedAsync()
    {
        var userEmail = await localStorage.GetItemAsync<string>("email");
        CurrentUser = await UserManager.GetCurrentUser(userEmail);

        AvailableLoans = await ProductCopyManager.GetAllLoans();
        AllProducts = await ProductManager.GetAllProducts();
    }

    public async Task EditProduct(int id, Product productToEdit)
    {
        editProduct = true;
        ProductId = id;
        ProductToUpdate = productToEdit;
    }

    public async Task SaveEditProduct()
    {
        await ProductManager.UpdateProduct(ProductId, ProductToUpdate);
        editProduct = false;
    }

    public async Task DeleteProduct(int id)
    {
        await ProductManager.DeleteProduct(id);
        AllProducts = await ProductManager.GetAllProducts();
    }

    public async Task LoanProduct(int productId)
    {
        await LoanManager.AddLoan(productId, CurrentUser.Id);
        AvailableLoans = await ProductCopyManager.GetAllLoans();
       

    }

    public async Task ReserveProduct(int productId)
    {
        ReservationManager.AddReservation(productId, CurrentUser.Id);
    }

    void AddCreator()
    {
        _ = addCreator = true ? (addCreator == false) : (addCreator == true);
    }
}
