@page "/allproducts"
@page "/search/{searchText}"
@inject ISearchManager SearchManager
@inject ILoanManager LoanManager
@inject IProductManager ProductManager

<NotAuthorized>
    <h3>Products</h3>
    @if (products != null)
    {
        <table class="table">
            <thead class="thead-light">
                <tr>
                    <th>Titel</th>
                    <th>Typ</th>
                    <th>Utgåva</th>
                    <th>Skapare</th>
                </tr>
            </thead>
            @foreach (var p in products)
            {
                <tr>
                    <a href="/ProductById/@p.Id" class="table-bordered">@p.Title</a>
                    <td>@p.Type</td>
                    <td>@p.Published.ToString("yyyy/MM/dd")</td>
                    @foreach(var creator in p.Creators)
                    {
                    <td>@creator.FirstName @creator.LastName</td>
                    <br />
                    }
                    
                    <td><a class="btn btn-primary" @onclick="() => LoanProduct(p.Id)">Låna</a></td>
                    <td><a class="btn btn-warning" @onclick="() => EditProduct(p.Id, p)">i</a></td>
                    <td><a class="btn btn-danger" @onclick="() => DeleteProduct(p.Id)">x</a></td>
                </tr>
            }
        </table>
    }
</NotAuthorized>

@code {
    [Parameter]
    public int Id { get; set; }
    public List<Product>? products { get; set; }
    public Product? productToUpdate { get; set; }

    [Parameter]
    public string? SearchText { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductManager.GetAllProducts();
    }

    public async Task EditProduct(int id, Product productToUpdate)
    {
        await ProductManager.UpdateProduct(id, productToUpdate);
    }

    public async Task DeleteProduct(int id)
    {
        await ProductManager.DeleteProduct(id);
    }
   
    public async Task LoanProduct(int id)
    {
        //var user = 
        
       
    }

    protected override async Task OnParametersSetAsync()
    {
       if (SearchText != null)
        {
            await SearchManager.SearchProducts(SearchText);
        }
        else
        {
            await ProductManager.GetAllProducts();
        }
    }
}
