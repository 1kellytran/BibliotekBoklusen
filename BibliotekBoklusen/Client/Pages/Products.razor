@page "/allproducts"
@inject ILocalStorageService LocalStorage;
@inject ISearchManager SearchManager
@inject ILoanManager LoanManager
@inject IProductManager ProductManager
@inject IUserManager UserManager
@inject IProductCopyManager ProductCopyManager
@inject IDialogService DialogService

<AuthorizeView Roles="Librarian, Admin">
    @if (editProduct)
    {
        <MudButton @onclick="CloseEditProduct"> <MudIcon Icon="@Icons.Filled.Close"></MudIcon></MudButton>
        <UpdateProduct Id=Id OnUpdateProduct="UpdateProduct"/>
    }
</AuthorizeView>

@if (AllProducts == null)
{
    <h4>Inga produkter för tillfället</h4>
}
else if (AllProducts.Count == 0)
{
    <h4>Laddar...</h4>
}
else
{
    <MudTable Context="product" Items="@AllProducts" Hover="@hover" Filter="new Func<Product,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Produkter</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Titel</MudTh>
            <MudTh>Skapare</MudTh>
            <MudTh>Utgiven</MudTh>
            <MudTh>Genre</MudTh>
            <MudTh>Typ</MudTh>
            <AuthorizeView Roles="Admin, Librarian">
                <MudTh>Antal exemplar</MudTh>
            </AuthorizeView>

        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Titel"><a href="ProductById/@product.Id"><b>@product.Title</b></a></MudTd>
            @if (product.Creators.Count > 1)
            {
            <MudTd DataLabel="Skapare">
                @product.Creators[0].FirstName @product.Creators[0].LastName, m.fl
            </MudTd>
            }
            else
            {
            <MudTd DataLabel="Skapare">
                @product.Creators[0].FirstName @product.Creators[0].LastName
            </MudTd>
            }
        <MudTd DataLabel="Utgiven">@product.Published.ToString("yyyy")</MudTd>
        @if (product.Category.Count > 1)
            {
            <MudTd DataLabel="Genre">
                @product.Category[0].CategoryName, m.fl
            </MudTd>
            }
            else
            {
            <MudTd DataLabel="Genre">
                @product.Category[0].CategoryName
            </MudTd>
            }
        <MudTd DataLabel="Typ">@product.Type</MudTd>

        <AuthorizeView Roles="Admin, Librarian">
            <MudTd>@product.NumberOfCopiesOwned</MudTd>
        </AuthorizeView>
        <AuthorizeView Roles="Member">
            @if (AvailableLoans.Count == 0)
                {
                <MudTd>

                    <MudButton Disabled Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary">Ej tillgänglig</MudButton>

                </MudTd>
                }
                else if (!AvailableLoans.Any(l => l.Id == product.Id))
                {
                <MudTd>

                    <MudButton Disabled Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary">Ej tillgänglig</MudButton>
                </MudTd>
                }
                else
                {
                @foreach (var availableProduct in AvailableLoans)
                    {
                    @if (availableProduct.Id == product.Id)
                        {
                        <MudTd>
                            <MudButton @onclick="() => LoanProduct(product.Id)">Låna</MudButton>
                        </MudTd>
                        }
                    }
                }
        </AuthorizeView>
        <AuthorizeView Context="_context" Roles="Librarian, Admin">
            <MudTd DataLabel="EditAndDelete" HorizontalAlignment="HorizontalAlignment.Right">
                <MudButton @onclick="() => EditProduct(product.Id)"><MudIcon Icon="@Icons.Filled.Edit"></MudIcon></MudButton>
                <MudButton @onclick="() => DeleteProduct(product.Id)"><MudIcon Icon="@Icons.Filled.Delete"></MudIcon></MudButton>
            </MudTd>
        </AuthorizeView>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public List<Product>? AllProducts { get; set; } = new();
    public List<Category> Categories { get; set; } = new();
    public List<Product> AvailableLoans { get; set; } = new();
    public DateTime TodaysDate { get; set; } = DateTime.Now;
    public Product ProductToUpdate { get; set; } = new();
    public Creator Creator { get; set; } = new();
    public User CurrentUser { get; set; } = new();
    private string searchString1 = "";
    private bool hover = true;
    private bool addCreator;
    public bool editProduct;
    int productId;

    protected override async Task OnInitializedAsync()
    {
        var userEmail = await LocalStorage.GetItemAsync<string>("email");
        CurrentUser = await UserManager.GetCurrentUser(userEmail);

        AvailableLoans = await ProductCopyManager.GetAllLoans();
        AllProducts = await ProductManager.GetAllProducts();
    }

    protected async Task UpdateProduct()
    {
        AllProducts = await ProductManager.GetAllProducts();
    }

    public async Task EditProduct(int id)
    {
        editProduct = true;
        Id = id;
    }

    public async Task DeleteProduct(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Är du säker på att du vill radera produkten? Detta går inte att återkalla.");
        parameters.Add("ButtonText", "Radera");
        parameters.Add("Color", Color.Error);
        parameters.Add("Id", id);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteProduct>("Radera produkter", parameters, options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            AllProducts = await ProductManager.GetAllProducts();
        }

    }

    public async Task LoanProduct(int productId)
    {
        await LoanManager.AddLoan(productId, CurrentUser.Id);
        AvailableLoans = await ProductCopyManager.GetAllLoans();
    }

    void AddCreator()
    {
        _ = addCreator = true ? (addCreator == false) : (addCreator == true);
    }

    void CloseEditProduct()
    {
        editProduct = false;
    }

    private bool FilterFunc1(Product product) => FilterFunc(product, searchString1);

    private bool FilterFunc(Product product, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (product.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{product.Type}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        foreach (var category in product.Category)
        {
            if (category.CategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        foreach (var creator in product.Creators)
        {
            if (creator.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase) || creator.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        return false;
    }
}
