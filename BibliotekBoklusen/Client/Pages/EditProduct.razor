@inject IProductManager ProductManager
@inject ICategoryManager CategoryManager
@inject ICreatorManager CreatorManager

<h3>Ändra produktinformation för: "@ProductToUpdate.Title"</h3>

<EditForm Context="_context" Model="ProductToUpdate" OnSubmit="SaveEditProduct">
    <table class="table">
        <thead class="thead-light">
            <tr>
                <th>Titel</th>
                <th>Förnamn</th>
                <th>Efternamn</th>
                <th>Utgåva</th>
                <th>Exemplar</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input type="text" @bind-value="ProductToUpdate.Title" /></td>
                @foreach (var c in ProductToUpdate.Creators)
                {
                    <td><input type="text" @bind-value=c.FirstName /></td>
                    <td><input type="text" @bind-value="c.LastName" /></td>
                }
                <td><input type="text" @bind-value="ProductToUpdate.Published" /></td>
                <td><input type="number" @bind-value="ProductToUpdate.NumberOfCopiesOwned" /></td>

                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small">Spara</MudButton>

            </tr>
        </tbody>
    </table>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    public List<Creator> Creators { get; set; } = new();
    public Creator Creator { get; set; } = new();
    public List<Category> Categories { get; set; } = new();
    [Parameter]
    public Product ProductToUpdate { get; set; } = new();
    public DateTime TodaysDate { get; set; } = DateTime.Now;
    private Category value { get; set; } = new();
    private IEnumerable<Category> CategoriesToAdd { get; set; } = new HashSet<Category>();
    bool addCreator;


    protected override async Task OnInitializedAsync()
    {
        ProductToUpdate = await ProductManager.GetProductById(Id);
        Categories = await CategoryManager.GetAllCategoriesAsync();
    }

    public async Task SaveEditProduct()
    {
        if (Creator.FirstName != null)
        {
            ProductToUpdate.Creators.Add(Creator);
        }
        Creator = new();
        await ProductManager.UpdateProduct(Id, ProductToUpdate);
    }

    void AddCreator()
    {
        _ = addCreator = true ? (addCreator == false) : (addCreator == true);
    }

    void SaveCreator()
    {
        Creators.Add(Creator);
        addCreator = false;
    }
}
