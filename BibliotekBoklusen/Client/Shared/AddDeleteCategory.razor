@inject ICategoryManager CategoryManager
@inject NavigationManager NavigationManager
@using BibliotekBoklusen.Client.Pages


<EditForm Model=Category OnValidSubmit=HandleAddCategory>
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Title">Kategori namn:</label>
        <InputText Id="Title" class="form-control" @bind-Value="Category.CategoryName" />
        <ValidationMessage For="@(() => Category.CategoryName)" />
    </div>
    
    <button type="submit" class="btn btn-primary mt-2">Lägg till</button>
</EditForm>

@message
<br />




    <h3>Ta bort kategorier:</h3>
    @if (Categories != null)
    {
        <table class="table">
            <thead class="thead-light mb-2">
                <tr>
                    <th>Kategorier</th>
                </tr>
            </thead>
            @foreach (var category in Categories)
            {
                <tr  >
                 <td @onclick="() => SetId(category.Id)">@category.CategoryName</td>
                 <a class="btn btn-danger" @onclick="() => HandleDeleteCategory(category.Id)">x</a>   
                </tr>
                
            }
        </table>
    }

<h3>Uppdatera Kategori:</h3>
 <EditForm Model=Category2>
        <DataAnnotationsValidator />

        <div class="form-group pb-2">
            <label for="Title">Kategori namn:</label>
            <InputText Id="Title" class="form-control" @bind-Value="Category2.CategoryName" />
            <ValidationMessage For="@(() => Category2.CategoryName)" />
        </div>
        <button class="btn btn-danger" @onclick="UpdateCategory">Uppdatera</button>
    </EditForm>
    @message2

@code {
    List<Category> Categories { get; set; }
    public Category Category { get; set; } = new();
    public Category Category2 { get; set; } = new();
    string message;
    string message2;

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryManager.GetAllCategoriesAsync();
    }

    async Task HandleDeleteCategory(int id)
    {
        await CategoryManager.DeleteCategoryAsync(id);
        foreach(var category in Categories)
        {
            if(category.Id == id)
            {
                message = $"{category.CategoryName} har tagits bort";
            }
        }
        Categories = await CategoryManager.GetAllCategoriesAsync();

    }
    async Task SetId(int id)
    {
        Category2 = await CategoryManager.GetCategoryByIdAsync(id);
    }
    async Task UpdateCategory()
    {

        await CategoryManager.UpdateCategory(Category2);
        Categories = await CategoryManager.GetAllCategoriesAsync();

    }

    async Task HandleAddCategory()
    {
        var result = await CategoryManager.AddCategory(Category);
        if (result != null)
            message = $"{Category.CategoryName} har lagts till";
        else
            message = $"{Category.CategoryName} finns redan";

        Categories = await CategoryManager.GetAllCategoriesAsync(); 
    }
}
