@page "/searchMember"
@inject IUserManager UserManager
@inject IDialogService DialogService

@if(message == "Ingen medlem hittades")
{
	<MudAlert Severity="Severity.Error">@message</MudAlert>
}
else if(message == "Uppdaterad")
{
	<MudAlert Severity="Severity.Success">@message</MudAlert>
}

@if (editUser)
{
	<EditForm Model="userToUpdate" OnSubmit="UpdateUser">
		<table class="table">
			<thead class="thead-dark">
				<tr>
					<th scope="col">Förnamn</th>
					<th scope="col">Efternamn</th>
					<th scope="col">Email</th>
					<th scope="col">Medlem sedan</th>
					<th scope="col">Aktiv</th>
					<th scope="col"></th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td><input @bind="userToUpdate.FirstName" /></td>
					<td><input @bind="userToUpdate.LastName" /></td>
					<td>@userToEdit.Email</td>
					<td>@userToEdit.Created.ToString("d")</td>
					<td><input type="checkbox" @bind="userToUpdate.IsActive" /></td>
					<td><button type="submit" class="btn btn-primary">Spara</button></td>
				</tr>
			</tbody>
		</table>
	</EditForm>
}

@if (members != null || members.Count != 0)
{
    <MudTable Context="member" Items="@members">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Personal</MudText>
            <MudSpacer />
            <MudTextField @onkeyup="HandleSearchMembers" @bind-Value="searchText" Placeholder="Search" Adornment="Adornment.Start" Class="mt-0"></MudTextField>
            <MudButton @onclick="SearchForMembers"><MudIcon Icon="@Icons.Material.Filled.Search"></MudIcon></MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Förnamn</MudTh>
            <MudTh>Efternamn</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Medlem sedan</MudTh>
            <MudTh>Behörig admin</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="FirstName">@member.FirstName</MudTd>
            <MudTd DataLabel="LastName">@member.LastName</MudTd>
            <MudTd DataLabel="Email">@member.Email</MudTd>
            <MudTd>@member.Created.ToString("d")</MudTd>
            @if (member.UserRole.Equals(UserRole.Admin))
            {
            <MudTd>Ja</MudTd>
            }
            else
            {
            <MudTd>Nej</MudTd>
            }
        <MudTd>
            <MudButton @onclick="() => EditUser(member)"><MudIcon Icon="@Icons.Filled.Edit"></MudIcon></MudButton>
            <MudButton @onclick="() => DeleteMember(member.Id)"><MudIcon Icon="@Icons.Filled.Delete"></MudIcon></MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
}

@code {
	private List<User> members = new List<User>();
	UpdatedUserDto userToUpdate = new UpdatedUserDto();
	User userToEdit = new User();
	int userId;
	bool editUser = false;
	string message;
	string searchText;

	private async Task SearchForMembers()
	{
		if (searchText != null || searchText != "")
		{
			var result = await UserManager.GetUsersBySearch(searchText);
			if (result == null || result.Count == 0)
			{
				message = "Ingen medlem hittades";
				members = new();
			}
			else
			{
				members = result.Where(u => u.UserRole.Equals(UserRole.Member)).ToList();
				message = null;
			}
		}
	}

	private void EditUser(User user)
	{
		userToUpdate.FirstName = user.FirstName;
		userToUpdate.LastName = user.LastName;
		userToUpdate.IsActive = user.IsActive;
		userToUpdate.UserRole = UserRole.Member;
		userToEdit = user;
		userId = user.Id;
		editUser = true;
	}

	private async Task UpdateUser()
	{
		editUser = false;
		await UserManager.UpdateUserinformation(userToUpdate, userId);
		message = "Uppdaterad";

		if (searchText != null || searchText != "")
		{
			var result = await UserManager.GetUsersBySearch(searchText);
			if (result == null || result.Count == 0)
			{
				message = "Ingen medlem hittades";
				members = new();
			}
			else
			{
				members = result.Where(u => u.UserRole.Equals(UserRole.Member)).ToList();
				message = null;
			}
		}
	}

	protected async Task KeywordEnterPressed(KeyboardEventArgs eventArgs)
	{
		if (eventArgs.Key == null || eventArgs.Key.Equals("Enter"))
		{
			SearchForMembers();
		}
	}

	public async Task DeleteMember(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Är du säker på att du vill ta bort medlem? Detta går inte att återkalla.");
        parameters.Add("ButtonText", "Ta bort");
        parameters.Add("Color", Color.Error);
        parameters.Add("Id", id);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<Pages.DeleteUser>("Ta bort medlem", parameters, options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
			members = await UserManager.GetMembers();
        }
    }

	    public async Task HandleSearchMembers(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
        {
            SearchForMembers();
        }
    }
}
