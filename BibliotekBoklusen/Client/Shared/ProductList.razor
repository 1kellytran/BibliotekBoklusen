@page "/ProductList"
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject ISearchManager SearchManager
@inject ILoanManager LoanManager
@inject IProductManager ProductManager
@inject IUserManager UserManager
@inject IProductCopyManager ProductCopyManager
@inject IReservationManager ReservationManager
@implements IDisposable

@if (SearchManager.Products == null || SearchManager.Products.Count == 0)
{
}
else
{
    <h3>Produkter</h3>

    <table class="table">
        <thead class="thead-light">
            <tr>
                <th>Titel</th>
                <th>Typ</th>
                <th>Utgåva</th>
                <th>Skapare</th>
                <th>Genre</th>
            </tr>
        </thead>
        @foreach (var p in SearchManager.Products)
        {
            <tr>
                <a href="/ProductById/@p.Id" class="table-bordered">@p.Title</a>
                <td>@p.Type</td>
                <td>@p.Published.ToString("yyyy/MM/dd")</td>
                @foreach (var creator in p.Creators)
                {
                    <td>@creator.FirstName @creator.LastName</td>
                }
                @foreach (var category in p.Category)
                {
                    <td>@category.CategoryName</td>
                }

                <AuthorizeView>
                    @foreach (var product in AvailableLoans)
                    {
                        @if (p.Id == product.Id)
                        {
                            isAvailable = true;
                        }
                    }
                    @if (isAvailable == true)
                    {
                        <td><a class="btn" @onclick="() => LoanProduct(p.Id)">Låna</a></td>
                    }
                    else
                    {
                        <td><a class="btn" @onclick="()=> ReserveProduct(p.Id)">Reservera</a></td>
                    }
                </AuthorizeView>
                 
            </tr>
        }
    </table>
}

@code {
    public int Id { get; set; }
    public List<Product> AvailableLoans { get; set; }
    private bool isAvailable;
    public User CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //var userEmail = await localStorage.GetItemAsync<string>("email");
        //CurrentUser = await UserManager.GetCurrentUser(userEmail);
        AvailableLoans = await ProductCopyManager.GetAllLoans();
        SearchManager.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        SearchManager.ProductsChanged -= StateHasChanged;
    }

     public async Task LoanProduct(int productId)
    {

        LoanManager.AddLoan(productId, CurrentUser.Id);
    }

    public async Task ReserveProduct(int productId)
    {
        ReservationManager.AddReservation(productId, CurrentUser.Id);
    }
}

