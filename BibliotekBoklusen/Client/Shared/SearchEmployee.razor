@page "/searchEmployee"
@inject NavigationManager NavigationManager
@inject IUserManager UserManager

@if (editUser)
{
    <EditForm Model="userToUpdate" OnSubmit="UpdateUser">
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Förnamn</th>
                    <th scope="col">Efternamn</th>
                    <th scope="col">Email</th>
                    <th scope="col">Medlem sedan</th>
                    <th scope="col">Behörig admin</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input @bind="userToUpdate.FirstName" /></td>
                    <td><input @bind="userToUpdate.LastName" /></td>
                    <td>@userToEdit.Email</td>
                    <td>@userToEdit.Created.ToString("d")</td>
                    <td><input type="checkbox" @bind="isAdmin" /></td>
                    <td><button type="submit" class="btn btn-primary">Spara</button></td>
                </tr>
            </tbody>
        </table>
    </EditForm>
}

@if (employees != null || employees.Count != 0)
{
    <MudTable Context="employee" Items="@employees">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Personal</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchText" Placeholder="Search" Adornment="Adornment.Start" Class="mt-0"></MudTextField>
            <MudButton @onclick="SearchForEmployee"><MudIcon Icon="@Icons.Material.Filled.Search"></MudIcon></MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>Förnamn</MudTh>
            <MudTh>Efternamn</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Medlem sedan</MudTh>
            <MudTh>Behörig admin</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="FirstName">@employee.FirstName</MudTd>
            <MudTd DataLabel="LastName">@employee.LastName</MudTd>
            <MudTd DataLabel="Email">@employee.Email</MudTd>
            <MudTd>@employee.Created.ToString("d")</MudTd>
            @if (employee.UserRole.Equals(UserRole.Admin))
            {
            <MudTd>Ja</MudTd>
            }
            else
            {
            <MudTd>Nej</MudTd>
            }
        <MudTd>
            <MudButton @onclick="() => EditUser(employee)"><MudIcon Icon="@Icons.Filled.Edit"></MudIcon></MudButton>
            <MudButton @onclick="() => DeleteUser(employee.Id)"><MudIcon Icon="@Icons.Filled.Delete"></MudIcon></MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

}
<h6 class="validation-message">@message</h6>

@code {
    private List<User> employees = new List<User>();
    UpdatedUserDto userToUpdate = new UpdatedUserDto();
    User userToEdit = new User();
    int userId;
    bool isAdmin;
    bool editUser = false;
    string message;
    string searchText = String.Empty;


    private async Task SearchForEmployee()
    {
        if (!String.IsNullOrEmpty(searchText))
        {
            var result = await UserManager.GetUsersBySearch(searchText);
            if (result == null || result.Count == 0)
            {
                message = "Inga användare funna";
                employees = new();
            }
            else
            {
                employees = result.Where(u => u.UserRole.Equals(UserRole.Librarian) || u.UserRole.Equals(UserRole.Admin)).ToList();
            }
        }
    }

    private void EditUser(User user)
    {
        userToUpdate.FirstName = user.FirstName;
        userToUpdate.LastName = user.LastName;
        userToUpdate.IsActive = user.IsActive;
        userToEdit = user;
        userId = user.Id;
        editUser = true;
    }

    private async Task UpdateUser()
    {
        editUser = false;
        await UserManager.UpdateUserinformation(userToUpdate, userId);
        message = "Användaren har uppdaterats";
    }

    private async Task DeleteUser(int userId)
    {
        await UserManager.DeleteUser(userId);
    }

}










