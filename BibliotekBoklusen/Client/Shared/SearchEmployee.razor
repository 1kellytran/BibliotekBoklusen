@page "/searchEmployee"
@inject IUserManager UserManager

<MudTextField Class="md-2" @bind-Value="searchText" Label="Sök personal" Variant="Variant.Text"></MudTextField>
<MudButton @onclick="SearchForEmployee"><MudIcon Icon="@Icons.Filled.PersonSearch"></MudIcon></MudButton>

@if (editUser)
{
    <EditForm Model="userToUpdate" OnSubmit="UpdateUser">
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Förnamn</th>
                    <th scope="col">Efternamn</th>
                    <th scope="col">Email</th>
                    <th scope="col">Medlem sedan</th>
                    <th scope="col">Behörig admin</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input @bind="userToUpdate.FirstName" /></td>
                    <td><input @bind="userToUpdate.LastName" /></td>
                    <td>@userToEdit.Email</td>
                    <td>@userToEdit.Created.ToString("d")</td>
                    <td><input type="checkbox" @bind="userToUpdate.IsAdmin" /></td>
                    <td><button type="submit" class="btn btn-primary">Spara</button></td>
                </tr>
            </tbody>
        </table>
    </EditForm>
}

@if (employees != null || employees.Count != 0)
{
    <table class="table">
        <thead class="thead-dark">
        <tr>
            <th scope="col">Förnamn</th>
            <th scope="col">Efternamn</th>
            <th scope="col">Email</th>
            <th scope="col">Medlem sedan</th>
            <th scope="col">Behörig admin</th>
            <th scope="col"></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    @if (@employee.Email != "admin@admin.com")
                    {
                        <td>@employee.FirstName</td>
                        <td>@employee.LastName</td>
                        <td>@employee.Email</td>
                        <td>@employee.Created.ToString("d")</td>
                        @if (employee.IsAdmin)
                        {
                            <td>Ja</td>
                        }
                        else
                        {
                            <td>Nej</td>
                        }                        
                        <td>
                            <MudButton @onclick="() => EditUser(employee)"><MudIcon Icon="@Icons.Filled.Edit"></MudIcon></MudButton>
                            <MudButton @onclick="() => DeleteUser(employee.Id)"><MudIcon Icon="@Icons.Filled.Delete"></MudIcon></MudButton>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
<h6 class="validation-message">@message</h6>

@code {
    private List<User> employees = new List<User>();
    UpdatedUserDto userToUpdate = new UpdatedUserDto();
    User userToEdit = new User();
    int userId;
    bool editUser = false;
    string message;
    string searchText;


    private async Task SearchForEmployee()
    {
        if (searchText != null || searchText != "")
        {
            var result = await UserManager.GetUsersBySearch(searchText);
            if (result == null || result.Count == 0)
            {
                message = "Inga användare funna";
                employees = new();
            }
            else
            {
                employees = result.Where(u => u.IsLibrarian == true || u.IsAdmin == true).ToList();
            }
        }
    }

    private void EditUser(User user)
    {
        userToUpdate.FirstName = user.FirstName;
        userToUpdate.LastName = user.LastName;
        userToUpdate.IsActive = user.IsActive;
        userToEdit = user;
        userId = user.Id;
        editUser = true;
    }

    private async Task UpdateUser()
    {
        editUser = false;
        await UserManager.UpdateUserinformation(userToUpdate, userId);
        employees = await UserManager.GetEmployees();
        message = "Användaren har uppdaterats";
    }

    private async Task DeleteUser(int userId)
    {
        await UserManager.DeleteUser(userId);
        employees = await UserManager.GetEmployees();
    }
}
